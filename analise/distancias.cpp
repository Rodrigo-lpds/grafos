#include "distancias.h"
#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>

Distancias::Distancias(int numVertices) : n(numVertices) {
    distancias.assign(n, vector<int>(n, INFINITO));
    diametro = 0;
    vertices_diametro = {-1, -1};
    
    // Dist√¢ncia de um v√©rtice para ele mesmo √© 0
    for (int i = 0; i < n; i++) {
        distancias[i][i] = 0;
    }
}

vector<int> Distancias::bfs_distancias_matriz(const MatrizAdjacencia& matriz, int origem) {
    BFS bfs(n);
    bfs.executarBFS_Matriz(matriz, origem + 1); // Converte para 1-based
    
    // Converte os n√≠veis da BFS para dist√¢ncias
    vector<int> dist(n, INFINITO);
    const vector<int>& niveis = bfs.getNiveis();
    
    for (int i = 0; i < n; i++) {
        if (bfs.foiVisitado(i + 1)) { // Verifica se foi visitado (1-based)
            dist[i] = niveis[i];
        }
    }
    
    return dist;
}

vector<int> Distancias::bfs_distancias_lista(const ListaAdjacencia& lista, int origem) {
    BFS bfs(n);
    bfs.executarBFS_Lista(lista, origem + 1); // Converte para 1-based
    
    // Converte os n√≠veis da BFS para dist√¢ncias
    vector<int> dist(n, INFINITO);
    const vector<int>& niveis = bfs.getNiveis();
    
    for (int i = 0; i < n; i++) {
        if (bfs.foiVisitado(i + 1)) { // Verifica se foi visitado (1-based)
            dist[i] = niveis[i];
        }
    }
    
    return dist;
}

int Distancias::calcularDistanciaEspecifica_Matriz(const MatrizAdjacencia& matriz, int origem, int destino) {
    if (origem < 1 || origem > n || destino < 1 || destino > n) {
        return INFINITO;
    }
    
    if (origem == destino) {
        return 0;
    }
    
    // Usa BFS com parada antecipada
    BFS bfs(n);
    bfs.executarBFS_Matriz(matriz, origem, destino);
    
    // Se o destino foi visitado, retorna o n√≠vel (dist√¢ncia)
    if (bfs.foiVisitado(destino)) {
        return bfs.getNivel(destino);
    } else {
        return INFINITO;
    }
}

int Distancias::calcularDistanciaEspecifica_Lista(const ListaAdjacencia& lista, int origem, int destino) {
    if (origem < 1 || origem > n || destino < 1 || destino > n) {
        return INFINITO;
    }
    
    if (origem == destino) {
        return 0;
    }
    
    // Usa BFS com parada antecipada
    BFS bfs(n);
    bfs.executarBFS_Lista(lista, origem, destino);
    
    // Se o destino foi visitado, retorna o n√≠vel (dist√¢ncia)
    if (bfs.foiVisitado(destino)) {
        return bfs.getNivel(destino);
    } else {
        return INFINITO;
    }
}

void Distancias::calcularDistancias_Matriz(const MatrizAdjacencia& matriz) {
    diametro = 0;
    vertices_diametro = {-1, -1};
    
    // Calcula dist√¢ncias de cada v√©rtice para todos os outros usando BFS
    for (int i = 0; i < n; i++) {
        vector<int> dist_de_i = bfs_distancias_matriz(matriz, i);
        
        for (int j = 0; j < n; j++) {
            distancias[i][j] = dist_de_i[j];
            
            // Atualiza di√¢metro se encontrar dist√¢ncia maior v√°lida
            if (dist_de_i[j] != INFINITO && dist_de_i[j] > diametro) {
                diametro = dist_de_i[j];
                vertices_diametro = {i + 1, j + 1}; // Converte para 1-based
            }
        }
    }
}

void Distancias::calcularDistancias_Lista(const ListaAdjacencia& lista) {
    // Para grafos grandes (>500 v√©rtices), usa algoritmo otimizado por padr√£o
    if (n > 500) {
        cout << "üîÑ Grafo grande detectado (" << n << " v√©rtices) - usando algoritmo otimizado\n";
        cout << "üí° Para matriz completa de dist√¢ncias, use um grafo menor ou implemente vers√£o otimizada espec√≠fica\n";
        
        // Calcula apenas o di√¢metro sem matriz completa
        calcularDiametroAproximado_Lista(lista);
        return;
    }
    
    // Para grafos menores, usa algoritmo completo original
    diametro = 0;
    vertices_diametro = {-1, -1};
    
    cout << "üîÑ Calculando matriz completa de dist√¢ncias (" << n << " v√©rtices)...\n";
    
    // Calcula dist√¢ncias de cada v√©rtice para todos os outros usando BFS
    for (int i = 0; i < n; i++) {
        vector<int> dist_de_i = bfs_distancias_lista(lista, i);
        
        for (int j = 0; j < n; j++) {
            distancias[i][j] = dist_de_i[j];
            
            // Atualiza di√¢metro se encontrar dist√¢ncia maior v√°lida
            if (dist_de_i[j] != INFINITO && dist_de_i[j] > diametro) {
                diametro = dist_de_i[j];
                vertices_diametro = {i + 1, j + 1}; // Converte para 1-based
            }
        }
    }
    
    cout << "‚úÖ Matriz de dist√¢ncias completa calculada\n";
}

int Distancias::getDistancia(int origem, int destino) const {
    if (origem < 1 || origem > n || destino < 1 || destino > n) {
        return INFINITO;
    }
    return distancias[origem - 1][destino - 1];
}

int Distancias::getDiametro() const {
    return diametro;
}

pair<int, int> Distancias::getVerticesDiametro() const {
    return vertices_diametro;
}

void Distancias::imprimirMatrizDistancias() const {
    cout << "Matriz de Dist√¢ncias:\n";
    cout << "     ";
    for (int j = 1; j <= n; j++) {
        cout << setw(4) << j;
    }
    cout << "\n";
    
    for (int i = 0; i < n; i++) {
        cout << setw(4) << (i + 1) << " ";
        for (int j = 0; j < n; j++) {
            if (distancias[i][j] == INFINITO) {
                cout << setw(4) << "‚àû";
            } else {
                cout << setw(4) << distancias[i][j];
            }
        }
        cout << "\n";
    }
    cout << "\n";
}

void Distancias::imprimirDiametro() const {
    cout << "Informa√ß√µes sobre o Di√¢metro:\n";
    if (isConexo()) {
        cout << "Di√¢metro do grafo: " << diametro << "\n";
        cout << "V√©rtices que formam o di√¢metro: " << vertices_diametro.first 
             << " e " << vertices_diametro.second << "\n";
        cout << "Caminho mais longo (m√≠nimo): " << diametro << " arestas\n";
    } else {
        cout << "Grafo n√£o √© conexo - di√¢metro √© infinito\n";
        cout << "Maior dist√¢ncia finita encontrada: " << diametro << "\n";
        if (vertices_diametro.first != -1) {
            cout << "Entre v√©rtices: " << vertices_diametro.first 
                 << " e " << vertices_diametro.second << "\n";
        }
    }
    cout << "\n";
}

void Distancias::salvarResultado(const string& nomeArquivo) const {
    ofstream arquivo(nomeArquivo);
    if (!arquivo) {
        throw runtime_error("Erro ao criar arquivo de dist√¢ncias");
    }
    
    arquivo << "An√°lise de Dist√¢ncias e Di√¢metro\n";
    arquivo << "================================\n\n";
    
    arquivo << "Matriz de Dist√¢ncias:\n";
    arquivo << "     ";
    for (int j = 1; j <= n; j++) {
        arquivo << setw(4) << j;
    }
    arquivo << "\n";
    
    for (int i = 0; i < n; i++) {
        arquivo << setw(4) << (i + 1) << " ";
        for (int j = 0; j < n; j++) {
            if (distancias[i][j] == INFINITO) {
                arquivo << setw(4) << "‚àû";
            } else {
                arquivo << setw(4) << distancias[i][j];
            }
        }
        arquivo << "\n";
    }
    arquivo << "\n";
    
    arquivo << "An√°lise do Di√¢metro:\n";
    if (isConexo()) {
        arquivo << "Grafo √© conexo\n";
        arquivo << "Di√¢metro: " << diametro << "\n";
        arquivo << "V√©rtices do di√¢metro: " << vertices_diametro.first 
                << " e " << vertices_diametro.second << "\n";
        arquivo << "Interpreta√ß√£o: O caminho m√≠nimo mais longo tem " 
                << diametro << " arestas\n";
    } else {
        arquivo << "Grafo n√£o √© conexo\n";
        arquivo << "Di√¢metro: ‚àû (infinito)\n";
        arquivo << "Maior dist√¢ncia finita: " << diametro << "\n";
        if (vertices_diametro.first != -1) {
            arquivo << "Entre v√©rtices: " << vertices_diametro.first 
                    << " e " << vertices_diametro.second << "\n";
        }
    }
    arquivo << "\n";
    
    arquivo << "Estat√≠sticas:\n";
    arquivo << "- V√©rtices: " << n << "\n";
    arquivo << "- Conexo: " << (isConexo() ? "Sim" : "N√£o") << "\n";
    
    // Conta quantos pares t√™m dist√¢ncia finita
    int pares_conectados = 0;
    int total_pares = n * (n - 1); // Exclui diagonal
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && distancias[i][j] != INFINITO) {
                pares_conectados++;
            }
        }
    }
    
    arquivo << "- Pares conectados: " << pares_conectados << "/" << total_pares << "\n";
    arquivo << "- Taxa de conectividade: " 
            << fixed << setprecision(1) 
            << (100.0 * pares_conectados / total_pares) << "%\n";
}

bool Distancias::isConexo() const {
    // Um grafo √© conexo se n√£o existem dist√¢ncias infinitas (exceto diagonal)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && distancias[i][j] == INFINITO) {
                return false;
            }
        }
    }
    return true;
}

const vector<vector<int>>& Distancias::getMatrizDistancias() const {
    return distancias;
}

// IMPLEMENTA√á√ïES OTIMIZADAS PARA C√ÅLCULO DO DI√ÇMETRO

vector<int> Distancias::selecionarVerticesAmostra(int numAmostras) const {
    vector<int> vertices;
    
    // Se o grafo √© pequeno, usa todos os v√©rtices
    if (n <= numAmostras) {
        for (int i = 0; i < n; i++) {
            vertices.push_back(i);
        }
        return vertices;
    }
    
    // Para grafos maiores, seleciona amostra distribu√≠da
    int intervalo = n / numAmostras;
    for (int i = 0; i < numAmostras; i++) {
        vertices.push_back((i * intervalo) % n);
    }
    
    // Adiciona alguns v√©rtices aleat√≥rios extras
    if (numAmostras < n / 2) {
        vertices.push_back(0);           // Primeiro v√©rtice
        vertices.push_back(n - 1);       // √öltimo v√©rtice
        vertices.push_back(n / 2);       // V√©rtice do meio
    }
    
    return vertices;
}

bool Distancias::verificarConectividade_Lista(const ListaAdjacencia& lista) {
    // Executa BFS do v√©rtice 0 para verificar se alcan√ßa todos
    BFS bfs(n);
    bfs.executarBFS_Lista(lista, 1); // V√©rtice 1 (1-based)
    
    // Verifica se todos os v√©rtices foram visitados
    for (int i = 1; i <= n; i++) {
        if (!bfs.foiVisitado(i)) {
            return false; // Grafo n√£o √© conexo
        }
    }
    return true; // Grafo √© conexo
}

void Distancias::calcularDiametroAproximado_Lista(const ListaAdjacencia& lista) {
    diametro = 0;
    vertices_diametro = {-1, -1};
    
    // Primeiro verifica se o grafo √© conexo (parada antecipada)
    bool grafoConexo = verificarConectividade_Lista(lista);
    
    // Define n√∫mero de amostras baseado no tamanho do grafo
    int numAmostras;
    if (n <= 100) {
        numAmostras = n; // Grafo pequeno: usa todos os v√©rtices
    } else if (n <= 1000) {
        numAmostras = min(50, n / 4); // Grafo m√©dio: ~25% dos v√©rtices
    } else {
        numAmostras = min(100, n / 10); // Grafo grande: ~10% dos v√©rtices
    }
    
    vector<int> vertices_amostra = selecionarVerticesAmostra(numAmostras);
    
    cout << "üöÄ Calculando di√¢metro aproximado usando " << vertices_amostra.size() 
         << " v√©rtices de " << n << " (" << (100.0 * vertices_amostra.size() / n) 
         << "% amostra)\n";
    
    // Para grafos n√£o conexos, usa estrat√©gia diferente
    if (!grafoConexo) {
        cout << "‚ö†Ô∏è  Grafo n√£o √© conexo - calculando maior dist√¢ncia finita\n";
        
        // Para grafos n√£o conexos, testa mais v√©rtices para encontrar 
        // a maior dist√¢ncia finita entre componentes
        for (int origem : vertices_amostra) {
            vector<int> dist_de_origem = bfs_distancias_lista(lista, origem);
            
            for (int j = 0; j < n; j++) {
                if (dist_de_origem[j] != INFINITO && dist_de_origem[j] > diametro) {
                    diametro = dist_de_origem[j];
                    vertices_diametro = {origem + 1, j + 1}; // Converte para 1-based
                }
            }
        }
    } else {
        // Para grafos conexos, usa amostragem mais agressiva
        for (int origem : vertices_amostra) {
            vector<int> dist_de_origem = bfs_distancias_lista(lista, origem);
            
            // Para grafos conexos, pode amostrar tamb√©m os destinos
            vector<int> destinos_amostra = selecionarVerticesAmostra(numAmostras);
            
            for (int destino : destinos_amostra) {
                if (origem != destino && dist_de_origem[destino] != INFINITO && 
                    dist_de_origem[destino] > diametro) {
                    diametro = dist_de_origem[destino];
                    vertices_diametro = {origem + 1, destino + 1}; // Converte para 1-based
                }
            }
            
            // Para o v√©rtice com maior dist√¢ncia, testa todos os destinos
            auto maxDist = max_element(dist_de_origem.begin(), dist_de_origem.end());
            if (maxDist != dist_de_origem.end() && *maxDist != INFINITO && *maxDist > diametro) {
                int maxIndex = maxDist - dist_de_origem.begin();
                diametro = *maxDist;
                vertices_diametro = {origem + 1, maxIndex + 1}; // Converte para 1-based
            }
        }
    }
    
    cout << "‚úÖ Di√¢metro aproximado calculado: " << diametro 
         << " (v√©rtices " << vertices_diametro.first << " e " << vertices_diametro.second << ")\n";
}

void Distancias::calcularDiametroApenas_Lista(const ListaAdjacencia& lista) {
    // N√£o aloca a matriz completa de dist√¢ncias - apenas calcula o di√¢metro
    calcularDiametroAproximado_Lista(lista);
}
